openapi: 3.0.1
info:
  title: User Management API
  description: API for managing users including CRUD operations.
  version: 1.0.0
servers:
  - url: http://localhost:5000/api  # Custom port (5000) instead of 3000
    description: Development Server with custom port
paths:
  /users:
    get:
      summary: Get all users
      operationId: getAllUsers
      responses:
        '200':
          description: Returns a list of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  Msg:
                    type: string
                  id:
                    type: string
  /users/{id}:
    get:
      summary: Get a user by ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    patch:
      summary: Update a user by ID
      operationId: updateUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  Msg:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
    delete:
      summary: Delete a user by ID
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  Msg:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
    put:
      summary: Replace a user by ID
      operationId: replaceUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '200':
          description: User replaced successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  Msg:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'

  # Login Path
  /login:
    post:
      summary: Login an existing user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  Msg:
                    type: string
                  token:
                    type: string
        '401':
          description: Invalid credentials

  # Register User Path under /login
  /login/registerUser:
    post:
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  Msg:
                    type: string
                  id:
                    type: string
        '400':
          description: Invalid user data

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        lastName:
          type: string
        email:
          type: string
        gender:
          type: string
        jobTitle:
          type: string

    NewUser:
      type: object
      required:
        - first_name
        - last_name
        - email
        - gender
        - job_title
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        gender:
          type: string
        job_title:
          type: string

    UpdateUser:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        gender:
          type: string
        job_title:
          type: string

    LoginUser:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
